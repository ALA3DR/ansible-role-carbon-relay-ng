---
## Global settings ##
carbon_relay_ng_enabled_on_boot: true
carbon_relay_ng_instance: "default"
carbon_relay_ng_max_procs: 2

carbon_relay_ng_admin_addr: "0.0.0.0:2004"
carbon_relay_ng_http_addr: "0.0.0.0:8081"
#spool_dir: "/var/spool/carbon-relay-ng"
carbon_relay_ng_spool_dir: "spool"
#pid_file: "/var/run/carbon-relay-ng.pid"
carbon_relay_ng_pid_file: "carbon-relay-ng.pid"

## Logging ##
# one of critical error warning notice info debug
# see docs/logging.md for level descriptions
carbon_relay_ng_log_level: "notice"

## Validation of inputs ##
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
carbon_relay_ng_validation_level_legacy: "medium"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
carbon_relay_ng_validation_level_m20: "medium"

# you can also validate that each series has increasing timestamps
carbon_relay_ng_validate_order: false

# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
carbon_relay_ng_bad_metrics_max_age: "24h"

## Inputs ##

### plaintext Carbon ###
carbon_relay_ng_listen_addr: "0.0.0.0:2003"

### Pickle Carbon ###
carbon_relay_ng_pickle_addr: "0.0.0.0:2013"

### AMQP ###
carbon_relay_ng_amqp_enabled: false
carbon_relay_ng_amqp_host: "localhost"
carbon_relay_ng_amqp_port: 5672
carbon_relay_ng_amqp_user: "guest"
carbon_relay_ng_amqp_password: "guest"
carbon_relay_ng_amqp_vhost: "/graphite"
carbon_relay_ng_amqp_exchange: "metrics"
carbon_relay_ng_amqp_queue: ""
carbon_relay_ng_amqp_key: "#"
carbon_relay_ng_amqp_durable: false
carbon_relay_ng_amqp_exclusive: true

carbon_relay_ng_blacklist: [
  'prefix collectd.localhost',
  'regex ^foo\..*\.cpu+'
]

carbon_relay_ng_aggregations:
    - function: 'sum'
      regex: '^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*)'
      format: 'stats.timers._sum_$1.requests.$2'
      interval: 10
      wait: 20
    - function: 'avg'
      regex: '^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*)'
      format: 'stats.timers._avg_$1.requests.$2'
      interval: 5
      wait: 10

carbon_relay_ng_rewriters:
    - old: 'testold'
      new: 'testnew'
      max: -1

carbon_relay_ng_routers:
    - key: 'carbon-default'
      type: 'sendAllMatch'
      prefix: ''
      substr: ''
      regex: ''
      destinations: [
          '127.0.0.1:2003 spool=true pickle=false'
      ]
    - key: 'carbon-tagger'
      type: 'sendAllMatch'
      prefix: ''
      substr: '='
      regex: ''
      destinations: [
        '127.0.0.1:2006'
      ]
    - key: 'analytics'
      type: 'sendFirstMatch'
      prefix: ''
      substr: ''
      regex: '(Err/s|wait_time|logger)'
      destinations: [
        'graphite.prod:2003 prefix=prod. spool=true pickle=true',
        'graphite.staging:2003 prefix=staging. spool=true pickle=true'
      ]

#[init]
# you can also put init commands here, in the same format as you'd use for the telnet interface
# (which is a bit tricky to use with its double spaces etc, so you're typically better off defining
# your setup via the sections above)
carbon_relay_ng_cmds: []
# here are some examples:
     # a plain carbon route that sends all data to the specified carbon (graphite) server (note the double space)
     #'addRoute sendAllMatch carbon-default  your-graphite-server:2003 spool=true pickle=false',

     # example route for https://grafana.com/cloud/metrics (note the double space)
     #'addRoute grafanaNet grafanaNet  your-base-url/metrics your-grafana.net-api-key /path/to/storage-schemas.conf',

     # ignore hosts that don't set their hostname properly via prefix match
     #'addBlack prefix collectd.localhost',

     # ignore foo.<anything>.cpu.... via regex match
     #'addBlack regex ^foo\..*\.cpu+',

     # aggregate timer metrics with sums
     #'addAgg sum ^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*) stats.timers._sum_$1.requests.$2 10 20',

     # aggregate timer metrics with averages
     #'addAgg avg ^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*) stats.timers._avg_$1.requests.$2 5 10',

     # all metrics with '=' in them are metrics2.0, send to carbon-tagger service (note the double space)
     #'addRoute sendAllMatch carbon-tagger sub==  127.0.0.1:2006',

     # send to the first carbon destination that matches the metric (note the double spaces between destinations)
     #'addRoute sendFirstMatch analytics regex=(Err/s|wait_time|logger)  graphite.prod:2003 prefix=prod. spool=true pickle=true  graphite.staging:2003 prefix=staging. spool=true pickle=true'

## Instrumentation ##
# in addition to serving internal metrics via expvar, you can send them to graphite/carbon
# IMPORTANT: setting this to "" will disable flushing, and metrics will pile up and lead to OOM
# see https://github.com/graphite-ng/carbon-relay-ng/issues/50
# so for now you MUST send them somewhere. sorry.
# (Also, the interval here must correspond to your setting in storage-schemas.conf if you use grafana hosted metrics)
carbon_relay_ng_graphite_addr: "localhost:2003"
carbon_relay_ng_graphite_interval: 1000  # in ms
